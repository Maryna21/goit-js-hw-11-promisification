{"version":3,"sources":["webpack:///./task-1.js","webpack:///./task-3.js","webpack:///./index.js","webpack:///./task-2.js"],"names":["delay","ms","Promise","resolve","setTimeout","logger","time","console","log","then","makeTransaction","transaction","reject","min","max","Math","floor","random","id","logSuccess","logError","warn","amount","catch","users","name","active","toggleUserState","allUsers","userName","map","user","updatedUsers","table"],"mappings":"8EAAA,MAAMA,EAAQC,GACH,IAAIC,QAASC,IAChBC,WAAW,KACPD,EAAQF,IACTA,KAGLI,EAASC,GAAQC,QAAQC,IAAK,kBAAiBF,OAErDN,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,MAAMS,KAAKJ,I,qBCXjB,MAAMK,EAAmBC,GAId,IAAIT,QAAQ,CAACC,EAASS,KACzB,MAAMZ,GAJuBa,EAIW,IAJNC,EAIW,IAH1CC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IADpB,IAACA,EAAKC,EAMlCV,WAAW,KACYW,KAAKE,SAAW,GAE/Bd,EAAQ,CAAEe,GAAIP,EAAYO,GAAIZ,KAAMN,IAGtCY,EAAOD,EAAYO,KACtBlB,KAGLmB,EAAa,EAAED,KAAIZ,WACvBC,QAAQC,IAAK,eAAcU,kBAAmBZ,QAE1Cc,EAAW,EAAGF,SAClBX,QAAQc,KAAM,gCAA+BH,+BAG/CR,EAAgB,CAAEQ,GAAI,GAAII,OAAQ,MAC/Bb,KAAKU,GACLI,MAAMH,GAETV,EAAgB,CAAEQ,GAAI,GAAII,OAAQ,MAC/Bb,KAAKU,GACLI,MAAMH,GAETV,EAAgB,CAAEQ,GAAI,GAAII,OAAQ,KAC/Bb,KAAKU,GACLI,MAAMH,GAETV,EAAgB,CAAEQ,GAAI,GAAII,OAAQ,MAC/Bb,KAAKU,GACLI,MAAMH,I,yDCtCT,gD,mBCAA,MAAMI,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAEnBC,EAAkB,CAACC,EAAUC,IACxB,IAAI3B,QAASC,IAIhBA,EAHqByB,EAASE,IAAIC,GAC9BA,EAAKN,OAASI,EAAW,IAAKE,EAAML,QAASK,EAAKL,QAAWK,MAMnE1B,EAAS2B,GAAgBzB,QAAQ0B,MAAMD,GAE7CL,EAAgBH,EAAO,SAASf,KAAKJ,GACrCsB,EAAgBH,EAAO,OAAOf,KAAKJ,K","file":"main.26d7d2b5ff236137c90b.js","sourcesContent":["const delay = ms => {\n    return new Promise((resolve => {\n        setTimeout(() => {\n            resolve(ms);\n        }, ms);\n    }))};\n\nconst logger = time => console.log(`Resolved after ${time}ms`);\n\ndelay(2000).then(logger); \ndelay(1000).then(logger); \ndelay(1500).then(logger); ","const makeTransaction = (transaction => {\n  const randomIntegerFromInterval = (min, max) => {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n  }\n    return new Promise((resolve, reject) => {\n        const delay = randomIntegerFromInterval(200, 500);\n        \n        setTimeout(() => {\n            const canProcess = Math.random() > 0.3;\n            if (canProcess) {\n                resolve({ id: transaction.id, time: delay })\n            }\n            else{\n              reject(transaction.id);}\n        }, delay);\n    })\n});\nconst logSuccess = ({id, time}) => {\n  console.log(`Transaction ${id} processed in ${time}ms`);\n};\nconst logError = ({ id }) => {\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\n\nmakeTransaction({ id: 70, amount: 150 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 71, amount: 230 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 72, amount: 75 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 73, amount: 100 })\n  .then(logSuccess)\n  .catch(logError);\n","import './styles.css';\nimport './task-1.js';\nimport './task-2.js';\nimport './task-3.js';\n\n","const users = [\n  { name: 'Mango', active: true },\n  { name: 'Poly', active: false },\n  { name: 'Ajax', active: true },\n  { name: 'Lux', active: false },\n];\nconst toggleUserState = (allUsers, userName) => {\n    return new Promise((resolve => {\n        const updatedUsers = allUsers.map(user =>\n            user.name === userName ? { ...user, active: !user.active } : user,\n        );\n        resolve(updatedUsers);\n    }))\n}\n \nconst logger = updatedUsers => console.table(updatedUsers);\n\ntoggleUserState(users, 'Mango').then(logger);\ntoggleUserState(users, 'Lux').then(logger);"],"sourceRoot":""}